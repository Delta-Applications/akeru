class TransferManager{constructor(){this._debug=!0,this.activity=null,this.elements={dialogConfirmBluetooth:document.querySelector("#enable-bluetooth-view"),searchDevicesList:document.querySelector("#search-devices-list-view"),searchForDevs:document.querySelector("#search-for-devices"),foundDevicesList:document.getElementById("bluetooth-found-devices"),pairedDevicesList:document.getElementById("bluetooth-paired-devices"),deviceListView:document.querySelector("#devices-list-view"),noNearbyDevicesDesc:document.querySelector("#nodevices-nearby"),searchingItemDesc:document.querySelector("#bluetooth-searching")},this.currentView=null,this.pairing=!1}init(){ViewHelper.init(),this.pairList=new List(this.elements.pairedDevicesList),this.foundList=new List(this.elements.foundDevicesList),this.defaultAdapter=null,this.btContext=new BluetoothContext,this.observeDefaultAdapter()}activityHandler(e){e.source.data.blobs&&0<e.source.data.blobs.length?this.activity=e:this.debug("activityHandler(): Cannot transfer without blobs data!")}endTransferWithReason(e){this.debug(`endTransferWithReason(): reason = ${e}`);e={activityHandlerId:this.activity.activityHandlerId,activityResult:e,isError:"cancelled"===e};navigator.serviceWorker.controller.postMessage(e),this.activity=null,clearInterval(window.keepSWStateInterval),window.close()}observeDefaultAdapter(){AdapterManager.observe("defaultAdapter",this.onDefaultAdapterChanged.bind(this)),this.onDefaultAdapterChanged(AdapterManager.defaultAdapter)}onDefaultAdapterChanged(e){null===e&&(this.debug("onDefaultAdapterChanged(): Can not get bluetooth adapter!"),this.endTransferWithReason("cancelled")),this.defaultAdapter&&this.unwatchDefaultAdapterAttributechanged(this.defaultAdapter),this.defaultAdapter=e,this.watchDefaultAdapterAttributechanged(this.defaultAdapter),this.enabledChanged(this.defaultAdapter.state)}unwatchDefaultAdapterAttributechanged(e){e.removeEventListener("attributechanged",this.onAdapterAttributeChanged)}watchDefaultAdapterAttributechanged(e){e.addEventListener("attributechanged",this.onAdapterAttributeChanged.bind(this,e))}onAdapterAttributeChanged(e,t){for(var i in t.attrs)switch(t.attrs[i]){case"state":this.enabledChanged(e.state);break;case"discovering":this.updateSearchingItem(e.discovering)}}enabledChanged(e){switch(this.debug(`onBluetoothEnabledChanged(): enabled = ${e}`),e){case null:break;case"enabled":this.elements.searchForDevs.hidden=!1,this.showPairedList();break;default:this.elements.dialogConfirmBluetooth.hidden&&this.confirmTurnBluetoothOn()}}onDevicePaired(){this.debug("onDevicePaired"),this.backToDeviceView()}showPairedList(){var e=this.currentView||this.elements.dialogConfirmBluetooth;this.toggleView(this.elements.deviceListView,e),this.currentView=this.elements.deviceListView,this.pairList.clear();const t=this.defaultAdapter.getPairedDevices();setTimeout(()=>{for(let e=0;e<t.length;e++)this.pairList.addItem(t[e])},100);e=SoftkeyHelper.softkeyItems["devices-list-view"];SoftkeyHelper.create(e)}sendFile(a){this.debug(`sendFile(): address of target device = ${a}`);const{blobs:e,filepaths:n,filenames:r}=this.activity.source.data;return this.produceSendingFilesSchedule(e.length),Promise.all(e.map((t,i)=>{if(n){var e=n[i];const s=navigator.b2g.getDeviceStorage("sdcard");return s.get(e).then(e=>(this.debug(`getFile succeed & file is sending... file = ${e}`),this.btContext.sendFile(a,e)),e=>(this.debug(`getFile failed so that blob is sending without filename ${e}`&&e.name),this.btContext.sendFile(a,t)))}if(t.name)return this.debug("blob is sending with name..."),this.btContext.sendFile(a,t);if(r){let e=r[i];return e=e.substring(e.lastIndexOf("/")+1),this.saveAsTempFile(t,e).then(e=>this.btContext.sendFile(a,e))}return this.debug("no filepath to get from device storage so that blob is sending without filename"),this.btContext.sendFile(a,t)})).then(()=>(this.debug("all files are already sent out.."),this.endTransferWithReason("transferred"),Promise.resolve()))}saveAsTempFile(s,e){const a=`${`.bluetooth/${Math.random().toString().substring(2)}`}/${e}`,n=navigator.b2g.getDeviceStorage("sdcard");return new Promise(t=>{const e=n.addNamed(s,a);function i(){t(s)}e.onsuccess=()=>{const e=n.get(a);e.onsuccess=()=>{t(e.result)},e.onerror=i},e.onerror=i})}produceSendingFilesSchedule(e){var t="og:kaios:bt";let i=document.head.querySelector(`meta[name="${t}"]`);i||(i=document.createElement("meta"),i.name=t,document.head.appendChild(i)),i.setAttribute("content",e)}toggleView(e,t){t.hidden=!0,t.classList.remove("current"),e.hidden=!1,e.classList.add("current")}confirmTurnBluetoothOn(){this.elements.dialogConfirmBluetooth.hidden=!1,this.elements.dialogConfirmBluetooth.classList.add("current"),this.currentView=this.elements.dialogConfirmBluetooth,SettingsObserver.getValue("dm.bluetooth.settings.ui").then(e=>{let t=null;t=e&&"gray"===e?SoftkeyHelper.softkeyItems["dm-enable-bluetooth-view"]:SoftkeyHelper.softkeyItems["enable-bluetooth-view"],SoftkeyHelper.create(t)})}startSearch(){this.toggleView(this.elements.searchDevicesList,this.elements.deviceListView),this.currentView=this.elements.searchDevicesList,this.elements.noNearbyDevicesDesc.classList.remove("visible"),this.foundList.clear(),this.btContext.startDiscovery()}turnOnBluetooth(){SoftkeyHelper.hide(),this.toggleView(this.elements.deviceListView,this.elements.dialogConfirmBluetooth),this.elements.dialogConfirmBluetooth.hidden=!1,this.btContext.setEnabled(!0)}cancelEnableBluetooth(){this.debug("cancelEnableBluetooth"),this.elements.dialogConfirmBluetooth.hidden=!0,this.elements.dialogConfirmBluetooth.classList.remove("current"),this.endTransferWithReason("cancelled")}backToDeviceView(){this.debug("backToDeviceView");var e=ViewHelper.curView;this.toggleView(this.elements.deviceListView,e),this.currentView=this.elements.deviceListView,this.btContext.stopDiscovery()}onDeviceFound(e){var{device:t}=e,e=this.foundList.index[t.address]||this.pairList.index[t.address];if(e){const i=e[1];if(t.name&&i){const s=i.querySelector("a > span");s&&(s.dataset.l10nId="",s.textContent=t.name)}}else this.foundList.addItem(t,"device-status-tap-connect")}itemClickHandle(e){e&&("search-for-devices"===e.id?this.startSearch():this.currentView===this.elements.deviceListView?this.sendFile(e.dataset.device):this.currentView===this.elements.searchDevicesList&&(this.updateDeviceDesc(e,!0),this.pair(e)))}updateSearchingItem(e){var t;this.debug(`updateSearchingItem(): callback from observe "discovering" = ${e}`),this.elements.searchingItemDesc.hidden=!e,this.currentView===this.elements.searchDevicesList&&(t=ViewHelper.curView.querySelector(".focus"),!1===e&&null===t&&this.elements.noNearbyDevicesDesc.classList.add("visible"),this.pairing||(e=SoftkeyHelper.softkeyItems[e?"search-devices-list-view":"search-devices-list-view-rescan"],SoftkeyHelper.create(e)))}pair(t){SoftkeyHelper.hide(),this.pairing=!0;var e=t.dataset.device;this.btContext.pair(e).then(()=>{this.pairing=!1,this.showPairedList()},e=>{this.debug(`pair fail: ${e}`),this.pairing=!1,this.updateDeviceDesc(t,!1),this.showConfirmDialog(t)})}showConfirmDialog(e){var t=e.querySelector("span").textContent;const i=this,s=new ConfirmDialogHelper({title:{id:"error-pair-title",args:{}},body:{id:"error-pair-fail",args:{devicename:t}},desc:{id:"error-pair-checkpin",args:{}},cancel:{l10nId:"cancel",priority:1,callback(){var e=SoftkeyHelper.softkeyItems["search-devices-list-view-rescan"];SoftkeyHelper.create(e)}},confirm:{l10nId:"pair",priority:3,callback(){i.pair(e)}}});s.show(document.getElementById("app-confirmation-dialog"))}updateDeviceDesc(e,t){const i=e.querySelector("small");t?i.setAttribute("data-l10n-id","device-status-pairing"):i.setAttribute("data-l10n-id","device-status-tap-connect")}debug(e){this._debug}}