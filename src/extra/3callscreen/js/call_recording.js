const CallRecording=function(){const a="callrecording.mode",t="callrecording.notification.enabled",o="callrecording.vibration.enabled",l="callrecording.file.format",i="device.storage.writable.name",s="callrecording",n=4e4,d=3,r=5e3,c=["ready","starting","started","stopping","stopped","saving"],u=[a,t,o,l,s,i],g={};let f="ready",v=null;const{telephony:p}=window.navigator.b2g;let h=null,w="outgoing",C=null,b=null,m=null,y=[],D=0,M=!0,R=null,$=0,I=0;function S(e){let n=g[e];if(void 0===n)switch(e){case a:n="off";break;case t:case o:n=!1;break;case l:n="3gpp";break;case i:n="sdcard";break;default:n=null}return n}function E(){"off"!==S(a)&&!CallsHandler.isVideoCall()&&CallsHandler.isAnyConnectedCall&&"ready"===f?(k("starting"),function(e){const n=navigator.b2g.getDeviceStorage("sdcard"),a=n.freeSpace();a.onsuccess=()=>{e(a.result)},a.onerror=()=>{DUMP(`freereq.result${a.result}`),e("error")}}(e=>"error"===e||e<=n?(k("ready"),void(e<=n&&M&&(M=!1))):(M=!0,R=e,void navigator.mediaDevices.getUserMedia({audio:{audioSource:"voicecall"}}).then(e=>{v=new MediaRecorder(e),v.ondataavailable=L,v.onstop=P,v.start(r),function(){k("started"),C=new Date,b=C;const n=p.active;if(n&&"connected"===n.state){let e=null;B("start-recording-call"),G(!0),m=n,n===p.conferenceGroup?($=n.calls.length,$?e=n.calls[$-1]:$=1):(CallsHandler.handledCalls.some(e=>e.call===n&&(w=e.outgoing?"outgoing":"incoming",!0)),$=0,e=n),h=e&&e.id.number?e.id.number:null,I=e&&e.serviceId?e.serviceId:0,n.addEventListener("statechange",H),n.addEventListener("groupchange",_)}else U()}()},()=>{k("ready"),DUMP("callscreen: getusermedia fail")})))):DUMP("callscreen:not allow recording")}function U(){v&&"started"===f&&(k("stopping"),v.stop())}function L(e){M&&(D+=e.data.size,D<R?(y.push(e.data),b=new Date):(M=!1,v.stop()))}function P(){B(M?"stop-recording-call":"insufficient-storage"),G(!1),k("stopped"),function(e){var n=Math.floor((b-C)/1e3);if(n<d)DUMP("callscreen: recording duration is too short"),k("ready");else{var a=S(i),t=S(l);const o=`/${a}/${s}/${h}_`+`${b.getTime()}_${n}_${w}_`+`${$}_${I}.${t}`,r=navigator.b2g.getDeviceStorage("sdcard"),c=r.addNamed(e,o);k("saving"),c.onsuccess=()=>{k("ready"),DUMP("callscreen: MediaDB operationed successfully")},c.onerror=()=>{k("ready"),DUMP(`callscreen: MediaDB failed to store${o}in DeviceStorage:`,c.error)}}}(new Blob(y)),v=null,$=0,y=[],D=0,m&&(m.removeEventListener("statechange",H),m.removeEventListener("groupchange",_),m=null)}function H(e){e=e.target;if(e)switch(e.videoCallState&&"Voice"!==e.videoCallState&&U(),e.state){case"held":case"disconnected":case"":U()}}function _(e){e=e.target;e&&e.group&&U()}function e(){return"auto"===S(a)}function k(e){f=-1===c.indexOf(e)?"":e,"ready"===f&&window.dispatchEvent(new CustomEvent("ready-to-rec"))}function G(e){if(e){const n=p.active;n===p.conferenceGroup?ConferenceGroupUI.showRecIndicator(!0):CallsHandler.handledCalls.some(e=>e.call===n&&(e.showRecIndicator(!0),!0))}else ConferenceGroupUI.showRecIndicator(!1),CallsHandler.handledCalls.forEach(e=>{e.showRecIndicator(!1)})}function B(e){S(t)&&CallScreen.showToast({messageL10nId:e}),S(o)&&navigator.vibrate([200])}return function(){for(let e=0;e<u.length;e++){const n=u[e];SettingsObserver.observe(n,void 0,e=>{g[n]=e})}}(),{manualCallRec:function(){e()||("ready"===f?E:U)()},autoCallRec:function(){e()&&("ready"===f?E():window.addEventListener("ready-to-rec",function e(){window.removeEventListener("ready-to-rec",e),E()}))},stopRec:U,showSpaceNoticeIfNeeded:function(){M=M||!0}}}();window.CallRecording=CallRecording;