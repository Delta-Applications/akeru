'use strict';var Shortcuts={init:function rm_init(){window.addEventListener('keyup',this);},handleEvent:function rm_handleEvent(evt){if(!ScreenManager.screenEnabled||evt.keyCode!==evt.DOM_VK_F6){return;}
document.location.reload();}};window.addEventListener('load',function startup(){if(!window.homescreenLauncher){window.homescreenLauncher=new HomescreenLauncher();}
window.wallpaperManager=new window.WallpaperManager();window.wallpaperManager.start();function registerGlobalEntries(){window.performance.mark("start registerGlobalEntries");KeyboardManager.init();window.nfcManager=new NfcManager();window.nfcManager.start();window.appWindowManager=new AppWindowManager();window.inputWindowManager=new window.InputWindowManager();window.inputWindowManager.start();window.activityWindowManager=new ActivityWindowManager();window.activityWindowManager.start();window.secureWindowManager=window.secureWindowManager||new SecureWindowManager();window.secureWindowFactory=new SecureWindowFactory();window.systemDialogManager=window.systemDialogManager||new SystemDialogManager();window.appWindowManager.start();window.performance.mark("done registerGlobalEntries");}
function safelyLaunchFTU(){FtuLauncher.retrieve();if(!window.homescreenLauncher){window.homescreenLauncher=new HomescreenLauncher();}
window.homescreenLauncher.start();}
if(applications.ready){registerGlobalEntries();safelyLaunchFTU();}else{window.addEventListener('applicationready',function appListReady(event){window.removeEventListener('applicationready',appListReady);registerGlobalEntries();safelyLaunchFTU();});}
function doneWithFTU(){window.performance.mark("done-with-ftu");window.removeEventListener('ftudone',doneWithFTU);window.removeEventListener('ftuskip',doneWithFTU);var lock=window.navigator.mozSettings.createLock();lock.set({'gaia.system.checkForUpdates':true});LazyLoader.load('js/external_storage_monitor.js',()=>{dump("Start external storage monitor");window.externalStorageMonitor=new ExternalStorageMonitor();window.externalStorageMonitor.start();});}
window.addEventListener('ftudone',doneWithFTU);window.addEventListener('ftuskip',doneWithFTU);ScreenManager.turnScreenOn();window.homescreenWindowManager=new HomescreenWindowManager();window.homescreenWindowManager.start();window.appWindowFactory=new AppWindowFactory();window.appWindowFactory.start();window.attentionWindowManager=new window.AttentionWindowManager();window.attentionWindowManager.start();window.dialerAgent=new DialerAgent();window.dialerAgent.start();window.layoutManager=new LayoutManager();window.layoutManager.start();window.visibilityManager=new VisibilityManager();window.visibilityManager.start();window.focus();window.performance.mark('loadEnd');window.core=BaseModule.instantiate('Core');window.core&&window.core.start();});window.addEventListener('wallpaperchange',function(evt){document.documentElement.style.setProperty('--wallpaper-url',`url('${evt.detail.url}')`);});function delayed_launch(){window.performance.mark("delayed-launch");function lazyLoad(file,winProp,objName){LazyLoader.load(file,()=>{window[winProp]=new objName();window[winProp].start();});}
Shortcuts.init();LazyLoader.load('js/ussd_receiver.js');LazyLoader.load('js/activities.js',()=>{window.activities=new Activities();});LazyLoader.load('js/accessibility.js',()=>{window.accessibility=new Accessibility();window.accessibility.start();});LazyLoader.load('js/battery_overlay.js',()=>{window.batteryOverlay=new BatteryOverlay();window.batteryOverlay.start();});LazyLoader.load('js/cpu_manager.js',()=>{window.cpuManager=new CpuManager();window.cpuManager.start();});LazyLoader.load('js/devtools/developer_hud.js',()=>{window.developerHUD=new DeveloperHUD();window.developerHUD.start();});LazyLoader.load('js/remote_debugger.js',()=>{window.remoteDebugger=new RemoteDebugger();});LazyLoader.load('js/places.js',()=>{window.places=new Places();window.places.start();});LazyLoader.load('js/ttlview.js',()=>{window.ttlView=new TTLView();});LazyLoader.load('js/sleep_menu.js',()=>{window.sleepMenu=new SleepMenu();window.sleepMenu.start();});LazyLoader.load('js/usb_storage.js',()=>{window.usbStorage=new UsbStorage();});LazyLoader.load(['shared/js/oauth2_config.js','js/account_authenticator/account_authenticator.js','js/account_authenticator/account_authenticator_config.js'],()=>{var evt=new CustomEvent('mozContentEvent',{bubbles:true,cancelable:false,detail:{type:'system-message-listener-ready'}});window.dispatchEvent(evt);})
window.browserPinSitesDataStore=new BrowserPinSitesDataStore();window.nfcUtils=new NfcUtils();window.rocketbar=new Rocketbar();}
window.addEventListener('homescreenloaded',function homeloaded(evt){window.removeEventListener('homescreenloaded',homeloaded);doCustJobAndSetDefaultServiceId();delayed_launch();window.performance.mark('fullyLoaded');});window.browser=new Browser();window.browser.start();window.browserSettings=new BrowserSettings();window.browserSettings.start();function cancelHomeTouchstart(e){if(e.touches[0].pageX===0&&e.touches[0].pageY===0){e.preventDefault();e.stopImmediatePropagation();}}
function cancelHomeTouchend(e){if(e.changedTouches[0].pageX===0&&e.changedTouches[0].pageY===0){e.preventDefault();e.stopImmediatePropagation();}}
function cancelHomeClick(e){if(e.pageX===0&&e.pageY===0){e.preventDefault();e.stopImmediatePropagation();}}
window.addEventListener('touchstart',cancelHomeTouchstart,true);window.addEventListener('touchend',cancelHomeTouchend,true);window.addEventListener('mousedown',cancelHomeClick,true);window.addEventListener('mouseup',cancelHomeClick,true);const kLastCustomizationValue='customization.value.last';const kFotaVersion='pre.fota.version';const kDataRoamingDomesticCustomized='stz.data.roaming_domestic.enabled';const KEY_FIH_VOLTE_DEFAULT_ENABLE_BOOL='fih.volte.default.enable.bool';const KEY_FIH_VOLTE_EDITABLE_BOOL='fih.volte.editable.bool';const KEY_FIH_VOWIFI_DEFAULT_ENABLE_BOOL='fih.vowifi.default.enable.bool';const KEY_FIH_VOWIFI_EDITABLE_BOOL='fih.vowifi.editable.bool';const KPreviousPrimaryMccMnc='fih.cust.previous.primary.mccmnc';var isApplyingVariant=false;var isNetworkInited=false;window.addEventListener('simslot-iccinfochange',function updateSimInfo(evt){console.log('bootstrap simslot-iccinfochange');updateTelephonyConfig();});function updateTelephonyConfig(){if(tryToGetIccInfo(false)===false){printlog(`simslot-iccinfochange, no SIM card on device or primary sim is still locked `);return;}
if(primaryMcc&&primaryMnc&&primaryMcc.length>0){printlog(`simslot-iccinfochange, simReady primaryMcc:`+primaryMcc+` primaryMnc:`+primaryMnc);}
if(isPrimarySIMLocked()&&primaryMcc!=null&&primaryMcc.length>0&&primarySIMIndex>-1){resetWaitForPinOfPrimarySIM();doCustJobAndSetDefaultServiceId();}
let p1=navigator.mozSettings.createLock().get('ril.data.defaultServiceId');let p2=navigator.mozSettings.createLock().get(KPreviousPrimaryMccMnc);Promise.all([p1,p2]).then(function(values){let serviceId=values[0]['ril.data.defaultServiceId'];let lastMccMnc=values[1][KPreviousPrimaryMccMnc];console.log('updateTelephonyConfig lastMccMnc: '+lastMccMnc+' serviceId: '+serviceId);let currentPrimaryMccMnc='';if(serviceId!==undefined){let currentPrimarySim=getSIMInfo(serviceId);if(currentPrimarySim&&currentPrimarySim.simCard!=undefined&&currentPrimarySim.simCard.iccInfo!=undefined){currentPrimaryMccMnc=currentPrimarySim.simCard.iccInfo.mcc+""+currentPrimarySim.simCard.iccInfo.mnc;console.log('updateTelephonyConfig currentPrimaryMccMnc: '+currentPrimaryMccMnc);}}
if(primarySIMIndex>-1){let sim=getSIMInfo(primarySIMIndex);if(sim&&sim.simCard!=undefined&&sim.simCard.iccInfo!=undefined){let simStatus=sim.getCardState();console.log('updateTelephonyConfig primary sim status: '+simStatus);if(simStatus==='ready'&&lastMccMnc!==currentPrimaryMccMnc&&isApplyingVariant===false){console.log('updateTelephonyConfig load default IMS config');isApplyingVariant=true;isNetworkInited=true;applyCustomizationVolte(lastMccMnc);updateNitzIgnoreOns();updateTwoDigitDialEnable();updateSettingsDefaultValues();}else if(simStatus==='ready'&&lastMccMnc===currentPrimaryMccMnc&&isNetworkInited===false){console.log('updateTelephonyConfig init network type');isApplyingVariant=true;isNetworkInited=true;SettingsListener.getSettingsLock().set({'ril.data.defaultServiceId':serviceId});}}}});}
const mozIccManager=navigator.mozIccManager;var primaryMcc=null,primaryMnc=null,primarySIMIndex=-1,waitForPinOfPrimarySIM=false;function printSIMInfo(sim1,sim2){if(sim1&&!sim1.isAbsent()){printlog(`sim1:`+sim1+` sim1.isLocked: `+sim1.isLocked());}
if(sim1&&!sim1.isAbsent()&&sim1.simCard!=undefined&&sim1.simCard.iccInfo!=undefined){printlog(`sim1.simCard.iccInfo:`+sim1.simCard.iccInfo);printlog(`sim1.simCard.iccInfo.mcc:`+sim1.simCard.iccInfo.mcc);printlog(`sim1.simCard.iccInfo.mnc:`+sim1.simCard.iccInfo.mnc);}
if(sim2&&!sim2.isAbsent()){printlog(`sim2:`+sim2+` sim2.isLocked: `+sim2.isLocked());}
if(sim2&&!sim2.isAbsent()&&sim2.simCard!=undefined&&sim2.simCard.iccInfo!=undefined){printlog(`sim2.simCard.iccInfo:`+sim2.simCard.iccInfo);printlog(`sim2.simCard.iccInfo.mcc:`+sim2.simCard.iccInfo.mcc);printlog(`sim2.simCard.iccInfo.mnc:`+sim2.simCard.iccInfo.mnc);}}
function setWaitForPinOfPrimarySIM(){waitForPinOfPrimarySIM=true;}
function resetWaitForPinOfPrimarySIM(){waitForPinOfPrimarySIM=false;}
function resetAllFlags(){primaryMcc=null;primaryMnc=null;primarySIMIndex=-1;waitForPinOfPrimarySIM=false;}
function choosePrimarySIM(sim1,sim2){if(sim1!=null&&!sim1.isAbsent()){primarySIMIndex=0;if(sim1.isLocked()){printlog(`primary SIM card(sim1) is locked, wait for pin`);setWaitForPinOfPrimarySIM();}}else if(sim2!=null&&!sim2.isAbsent()){primarySIMIndex=1;if(sim2.isLocked()){printlog(`primary SIM card(sim2) is locked, wait for pin`);setWaitForPinOfPrimarySIM();}}
printlog(`primary SIM card is slot_`+primarySIMIndex);}
function isPrimarySIMLocked(){return waitForPinOfPrimarySIM;}
function initPrimarySIMInfo(){if(primarySIMIndex>-1){let sim=SIMSlotManager.getSlots()[primarySIMIndex];if(sim&&sim.simCard!=undefined&&sim.simCard.iccInfo!=undefined){primaryMcc=sim.simCard.iccInfo.mcc;primaryMnc=sim.simCard.iccInfo.mnc;}
if(primaryMcc&&primaryMnc){if(primaryMcc!=null&&primaryMcc.length===0){printlog(`primary SIM card is invalidate due to unknown reason, set it to 000-00 instead`);primaryMcc='000';primaryMnc='00';}
printlog(`primary SIM card is ready, primaryMcc:`+primaryMcc+` primaryMnc:`+primaryMnc);}else{printlog(`primary SIM card is NOT ready, it should be locked`);}}else{primaryMcc='000';primaryMnc='00';printlog(`primary SIM card is NOT ready, set it to 000-00`);}}
function getSIMInfo(index){if(index==0||index==1){let sim=SIMSlotManager.getSlots()[index];return sim;}
return null;}
function tryToGetIccInfo(resetFlag){try{if(SIMSlotManager.noSIMCardOnDevice()){printlog(`tryToGetIccInfo, no SIM card on device`);return false;}
if(resetFlag===true){resetAllFlags();}
if(primarySIMIndex==-1)choosePrimarySIM(getSIMInfo(0),getSIMInfo(1));if(resetFlag&&isPrimarySIMLocked()){printlog(`tryToGetIccInfo, failed to get iccinfo of primary SIM, so we should wait for unlocking pin`);return false;}
initPrimarySIMInfo();return true;}catch(e){printlog(`exception in tryToGetIccInfo:  `+e);return false;}}
function applyVariant(lastCustValue,mccmnc){var key='language.user.selected';var lock=navigator.mozSettings.createLock();lock.get(key).onsuccess=(event)=>{let blacklist=['volte_vowifi_settings.show'];var result=event.target.result;var value;if(mccmnc=="00000"||result&&result[key]){blacklist.push('language.current');}
printlog(`blacklist in applyVariant:  `+blacklist);applyVariantImpl(lastCustValue,mccmnc,blacklist);}}
function applyVariantImpl(lastCustValue,mccmnc,blacklist){try{let currentMccmnc;let mcc=mccmnc.slice(0,3);let mnc=mccmnc.slice(3);let matchInfo={"mcc":"000","mnc":"00"};if(mcc&&mnc&&mcc.length>0){matchInfo.mcc=mcc;matchInfo.mnc=mnc;}
printlog(`matchInfo.mcc `+matchInfo.mcc+` matchInfo.mnc `+matchInfo.mnc);if(lastCustValue!==mccmnc){let fotaVersion=navigator.engmodeExtension.getPropertyValue('ro.build.version.fih');navigator.mozSettings.createLock().set({[kFotaVersion]:fotaVersion});currentMccmnc=matchInfo.mcc+matchInfo.mnc;printlog(`Apply variant: mcc ${matchInfo.mcc} mnc ${matchInfo.mnc} fotaVersion ${fotaVersion}`);navigator.customization.applyVariant(matchInfo,blacklist).then((result)=>{navigator.mozSettings.createLock().set({'customization.value.last':currentMccmnc});printlog(`>>> Succeed to apply variantSucceed to apply variant, details is ${JSON.stringify(result)}`);},(reason)=>{printlog(`Failed to apply variant, reason is ${reason}`);if(mcc&&mnc&&`${reason}`=="Not find the mandatory file."){matchInfo.mnc="999";currentMccmnc=matchInfo.mcc+matchInfo.mnc;if(lastCustValue==currentMccmnc){printlog(`ApplyVariant `+currentMccmnc+`, work is done, so ignore it`);return;}
printlog(`Apply variant: mcc `+matchInfo.mcc+` mnc `+matchInfo.mnc);navigator.customization.applyVariant(matchInfo,blacklist).then((result2)=>{navigator.mozSettings.createLock().set({'customization.value.last':currentMccmnc});printlog(`>>> Succeed to apply variant [mcc 999], details is ${JSON.stringify(result2)}`);},(reason2)=>{printlog(`Failed to apply variant, reason is ${reason2}`);matchInfo.mcc="000";matchInfo.mnc="00";currentMccmnc=matchInfo.mcc+matchInfo.mnc;if(lastCustValue==currentMccmnc){printlog(`ApplyVariant `+currentMccmnc+`, work is done, so ignore it`);return;}
printlog(`Apply variant: mcc `+matchInfo.mcc+` mnc `+matchInfo.mnc);navigator.customization.applyVariant(matchInfo,blacklist).then((result3)=>{navigator.mozSettings.createLock().set({'customization.value.last':currentMccmnc});printlog(`>>> Succeed to apply variant [000 00], details is ${JSON.stringify(result3)}`);},(reason3)=>{printlog(`Failed to apply variant [000 00], reason is ${JSON.stringify(reason3)}`);});});}});}else{printlog(`ApplyVariant `+mccmnc+`, work is done, so ignore it`);}}catch(e){printlog(`exception in applyVariant:  `+e);}}
function tryToApplyVariantWhenNoSIMCardOnDevice(){if(SIMSlotManager.noSIMCardOnDevice()){var req=navigator.mozSettings.createLock().get(kLastCustomizationValue);req.onsuccess=function(){printlog(`tryToApplyVariantWhenNoSIMCardOnDevice, last value is `+req.result[kLastCustomizationValue]);if(req.result[kLastCustomizationValue]===undefined||req.result[kLastCustomizationValue]==="clearedbysecretcode"||req.result[kLastCustomizationValue]==="00000"){printlog(`applyCustomization, no SIM card on device`);initPrimarySIMInfo();let mccmnc=primaryMcc+""+primaryMnc;applyVariant(req.result[kLastCustomizationValue],mccmnc);}else{printlog(`tryToApplyVariantWhenNoSIMCardOnDevice, work is done, so ignore `+req.result[kLastCustomizationValue]);}}}}
function tryToApplyVariant(){printlog(`tryToApplyVariant`);try{var req=navigator.mozSettings.createLock().get(kLastCustomizationValue);var mccmnc=primaryMcc+""+primaryMnc;req.onsuccess=function onGetLocksuccess(){printlog(`Apply variant, last value is `+req.result[kLastCustomizationValue]
+`, mccmnc:`+mccmnc+`, waitForPINOfSIM:`+isPrimarySIMLocked());if(!isPrimarySIMLocked()&&primarySIMIndex>-1){if(req.result[kLastCustomizationValue]===undefined||req.result[kLastCustomizationValue]==="clearedbysecretcode"||req.result[kLastCustomizationValue]==="00000"){applyVariant(req.result[kLastCustomizationValue],mccmnc);}else{printlog(`tryToApplyVariant, do nothing and work has been done before, last value is `+req.result[kLastCustomizationValue]);}}else{printlog(`tryToApplyVariant, do nothing due to waitForPINOfSIM=`+isPrimarySIMLocked()+` primarySIMIndex `+primarySIMIndex);}};}catch(e){printlog(`exception in tryToApplyVariant:  `+e);}}
function trytoApplyLastCustomization(lastCustomization){dump("trytoApplyLastCustomization:"+lastCustomization);tryToGetIccInfo(false);if(isPrimarySIMLocked()){return;}
let fotaVersion=navigator.engmodeExtension.getPropertyValue('ro.build.version.fih');let req=navigator.mozSettings.createLock().get(kFotaVersion);req.onsuccess=()=>{let preFota=req.result[kFotaVersion];printlog(`fota version old = ${preFota}, now = ${fotaVersion}`);if(!(preFota&&preFota===fotaVersion)){printlog(`fota version changed, load customization`);navigator.mozSettings.createLock().set({[kFotaVersion]:fotaVersion});applyVariant(null,lastCustomization);applyCustomizationVolte(lastCustomization);resetFotaDownloadVia();}}}
function getDefaultSIMID(){let sim1=getSIMInfo(0);let sim2=getSIMInfo(1);let simId=primarySIMIndex;if(sim1!=null&&!sim1.isAbsent()&&sim2!=null&&!sim2.isAbsent()){simId=-1;}
printlog(`simId is `+simId);return simId;}
function applyCustomizationVolte(lastMccMnc){console.log('applyonCustomizationVolte : get customiztion config');let slotCount=SIMSlotManager.getSlots().length;console.log('applyonCustomizationVolte slotCount: '+slotCount);if(primarySIMIndex<=-1||primarySIMIndex>=slotCount){console.log('applyonCustomizationVolte invalid sim index');return;}
let matchInfo={"clientId":"0"};matchInfo.clientId=primarySIMIndex;let volteDefaultOn=false;let vowifiDefaultOn=false;let volteEditable=false;let vowifiEditable=false;Promise.all([navigator.customization.getValueForCarrier(matchInfo,KEY_FIH_VOLTE_DEFAULT_ENABLE_BOOL),navigator.customization.getValueForCarrier(matchInfo,KEY_FIH_VOWIFI_DEFAULT_ENABLE_BOOL),navigator.customization.getValueForCarrier(matchInfo,KEY_FIH_VOLTE_EDITABLE_BOOL),navigator.customization.getValueForCarrier(matchInfo,KEY_FIH_VOWIFI_EDITABLE_BOOL)]).then(function(values){volteDefaultOn=JSON.stringify(values[0])==='true'?true:false;vowifiDefaultOn=JSON.stringify(values[1])==='true'?true:false;volteEditable=JSON.stringify(values[2])==='true'?true:false;vowifiEditable=JSON.stringify(values[3])==='true'?true:false;console.log('applyonCustomizationVolte : volteDefaultOn: '+volteDefaultOn+' vowifiDefaultOn: '+vowifiDefaultOn+' volteEditable: '+volteEditable+' vowifiEditable: '+vowifiEditable);let currentMccMnc=primaryMcc+""+primaryMnc;if(lastMccMnc!==currentMccMnc){console.log('applyonCustomizationVolte set lastMccMnc to '+currentMccMnc);navigator.mozSettings.createLock().set({[KPreviousPrimaryMccMnc]:currentMccMnc}).then((result)=>{printlog(`>>> Succeed to set lastMccMnc, details is ${JSON.stringify(result)}`);});}
console.log('applyonCustomizationVolte set default serviceID: '+primarySIMIndex);SettingsListener.getSettingsLock().set({'ril.data.defaultServiceId':primarySIMIndex});SettingsListener.getSettingsLock().set({'ril.data.defaultServiceId.iccId':navigator.mozMobileConnections[primarySIMIndex].iccId});SettingsListener.getSettingsLock().set({'ril.telephony.defaultServiceId':getDefaultSIMID()});SettingsListener.getSettingsLock().set({'ril.voicemail.defaultServiceId':getDefaultSIMID()});SettingsListener.getSettingsLock().set({'ril.sms.defaultServiceId':getDefaultSIMID()});SettingsListener.getSettingsLock().set({'ril.mms.defaultServiceId':getDefaultSIMID()});if(primarySIMIndex===1){console.log('applyonCustomizationVolte remove VoWiFi settings for SIM2');vowifiDefaultOn=false;vowifiEditable=false;}
if(volteDefaultOn===true&&vowifiDefaultOn===true){dump('applyonCustomizationVolte : volte&vowifi menu show & toggle on');SettingsListener.getSettingsLock().set({'ril.ims.enabled':true});if(isCellularPreferred(currentMccMnc)){dump('applyonCustomizationVolte : special Carrier set call mode to cellular-preferred');SettingsListener.getSettingsLock().set({'ril.ims.preferredProfile':'cellular-preferred'});}else{SettingsListener.getSettingsLock().set({'ril.ims.preferredProfile':'wifi-preferred'});}}else if(volteDefaultOn===true&&vowifiDefaultOn===false){dump('applyonCustomizationVolte : Volte toggle on & VoWiFi toggle off');SettingsListener.getSettingsLock().set({'ril.ims.enabled':true});SettingsListener.getSettingsLock().set({'ril.ims.preferredProfile':'cellular-only'});}else if(volteDefaultOn===false&&vowifiDefaultOn===true){dump('applyonCustomizationVolte : Volte toggle off & VoWiFi toggle on');SettingsListener.getSettingsLock().set({'ril.ims.enabled':true});SettingsListener.getSettingsLock().set({'ril.ims.preferredProfile':'wifi-only'});}else{dump('applyonCustomizationVolte : IMS set to disable');SettingsListener.getSettingsLock().set({'ril.ims.enabled':false});}
if(volteEditable===false&&vowifiEditable===false){dump('applyonCustomizationVolte : IMS menu hide');SettingsListener.getSettingsLock().set({'volte_vowifi_settings.show':false});}else{dump('applyonCustomizationVolte : IMS menu show');SettingsListener.getSettingsLock().set({'volte_vowifi_settings.show':true});}});LazyLoader.load(['/shared/js/sim_settings_helper.js'],function(){SimSettingsHelper.updateMessagesSettings(primarySIMIndex);});}
function isCellularPreferred(mccMnc){dump('isCellularPreferred mccMnc: '+mccMnc);if(mccMnc==='50503'){return true;}
return false;}
function resetFotaDownloadVia(){var CONFIG_ID_DOWNLOADVIA=1002;var CONFIG_VALUE_DV_WIFIONLY=0;navigator.fota.setNumberConfig(CONFIG_ID_DOWNLOADVIA,CONFIG_VALUE_DV_WIFIONLY);}
function doCustJobAndSetDefaultServiceId(){printlog(`doCustJobAndSetDefaultServiceId`);if(true)printSIMInfo(getSIMInfo(0),getSIMInfo(1));var req=navigator.mozSettings.createLock().get(kLastCustomizationValue);req.onsuccess=function(){if(req.result[kLastCustomizationValue]===undefined||req.result[kLastCustomizationValue]==="clearedbysecretcode"||req.result[kLastCustomizationValue]==="00000"){printlog(`doCustJobAndSetDefaultServiceId, last value is `+req.result[kLastCustomizationValue]);applyCustomization();if(req.result[kLastCustomizationValue]==="00000"&&(primaryMcc==null||primaryMcc.length==0||primaryMcc==='000')){trytoApplyLastCustomization(req.result[kLastCustomizationValue]);}
setDefaultServiceId();}else{printlog(`doCustJobAndSetDefaultServiceId, only apply value: ${req.result[kLastCustomizationValue]} if fota upgrade`);trytoApplyLastCustomization(req.result[kLastCustomizationValue]);setDefaultServiceId();}};}
function isSIMCardLocked(index){if(index==0||index==1){let sim=SIMSlotManager.getSlots()[index];if(sim&&!sim.isAbsent()&&sim.isLocked()){return true;}}
return false;}
function setNewServiceId(){let finish=0;for(let index=0;finish===0&&index<2;++index){if(!SIMSlotManager.isSIMCardAbsent(index)){if(isSIMCardLocked(index)){finish=1;printlog(`setDefaultServiceId, wait for unlocking `+index);return;}else{printlog(`>>> setDefaultServiceId outgoingData: `+index);SimSettingsHelper.setServiceOnCard('outgoingData',index);SimSettingsHelper._setToSettingsDB('last.ril.data.defaultServiceId',index);finish=1;return;}}}}
function setDefaultServiceId(){if(SIMSlotManager.noSIMCardOnDevice()){printlog(`setDefaultServiceId, no sim card on device`);return;}
LazyLoader.load(['/shared/js/sim_settings_helper.js'],function(){var req=navigator.mozSettings.createLock().get('last.ril.data.defaultServiceId');req.onsuccess=function(){let cardIndex=req.result['last.ril.data.defaultServiceId'];printlog(`setDefaultServiceId, last value of outgoingData is `+cardIndex);if(cardIndex===undefined){setNewServiceId();return;}else{if(isSIMCardLocked(cardIndex)){printlog(`setDefaultServiceId, wait for unlocking `+cardIndex);return;}
if(!SIMSlotManager.isSIMCardAbsent(cardIndex)){printlog(`>>> setDefaultServiceId `+cardIndex);SimSettingsHelper.setServiceOnCard('outgoingData',cardIndex);SimSettingsHelper._setToSettingsDB('last.ril.data.defaultServiceId',cardIndex);return;}
setNewServiceId();}};});}
function applyCustomization(){if(tryToGetIccInfo(true)&&!isPrimarySIMLocked()&&primaryMcc!=null&&primaryMcc.length>0&&primarySIMIndex>-1){tryToApplyVariant();}else if(SIMSlotManager.noSIMCardOnDevice()){tryToApplyVariantWhenNoSIMCardOnDevice();}}
function iccInfoChanged(){if(tryToGetIccInfo(false)===false){printlog(`simslot-iccinfochange, no SIM card on device or primary sim is still locked `);return;}
if(primaryMcc&&primaryMnc&&primaryMcc.length>0){printlog(`simslot-iccinfochange, simReady primaryMcc:`+primaryMcc+` primaryMnc:`+primaryMnc);}
if(isPrimarySIMLocked()&&primaryMcc!=null&&primaryMcc.length>0&&primarySIMIndex>-1){resetWaitForPinOfPrimarySIM();doCustJobAndSetDefaultServiceId();}}
function printlog(info){if(true){console.log(`[customization] `+info);}}
navigator.customization.onchange=function(){printlog(`variant change.`);customizeApps();customizationT9();StatusBar.onCustomizationApplied();navigator.mozSettings.createLock().get('voice-input.enabled').then((res)=>{localStorage.setItem('voice-input.enabled',res['voice-input.enabled']);});navigator.engmodeExtension.setPrefValue("dom.contact.minmatch.num",7);const kVoicemailCuzVal='stz.voicemail.val';navigator.customization.getValue(kVoicemailCuzVal).then((result)=>{printlog(kVoicemailCuzVal+` in customization state is ${JSON.stringify(result)}`);if(typeof(result)==='string'&&result){navigator.mozSettings.createLock().set({'ril.iccInfo.mbdn':result});}});}
function customizeApps(){let mccmnc=getMccMnc();let customApps='1';if(mccmnc[0]=='460'){customApps='0';}
navigator.mozSettings.createLock().set({'custom.launcher.apps':customApps});}
function customizationT9(){try{navigator.customization.getValue('def.inputmethod.kika.enabled').then((result)=>{var kikaEnabled=`${JSON.stringify(result)}`;dump("initKika "+kikaEnabled);if(kikaEnabled=='undefined'||kikaEnabled=='0'){navigator.mozSettings.createLock().set({'keypad.t9-enabled':false});}else{navigator.mozSettings.createLock().set({'keypad.t9-enabled':true});}},(reason)=>{dump("initKika failed reason = "+`${JSON.stringify(reason)}`);});}catch(e){dump("initKika exception = "+e);}}
function updateSettingsDefaultValues(){printlog(`Set settings default values`);navigator.customization.getValue(kDataRoamingDomesticCustomized).then((result)=>{printlog(kDataRoamingDomesticCustomized+` in customization state is ${result}`);navigator.engmodeExtension.setPropertyValue('persist.roaming_domestic.enable',(result?'true':'false'));});}
function getMccMnc(){let mccmnc=['000','00'];if(SIMSlotManager.ready){let slot0=SIMSlotManager.getSlots()[0];let slot1=SIMSlotManager.getSlots()[1];if(slot0&&slot0.simCard&&slot0.simCard.iccInfo){mccmnc[0]=slot0.simCard.iccInfo.mcc;mccmnc[1]=slot0.simCard.iccInfo.mnc;}else if(slot1&&slot1.simCard&&slot1.simCard.iccInfo){mccmnc[0]=slot1.simCard.iccInfo.mcc;mccmnc[1]=slot1.simCard.iccInfo.mnc;}}
else{for(var i=0;i<navigator.mozMobileConnections.length;i++){if(navigator.mozMobileConnections[i].voice.network.mcc){mccmnc[0]=navigator.mozMobileConnections[i].voice.network.mcc;mccmnc[1]=navigator.mozMobileConnections[i].voice.network.mnc;break;}}}
dump("Get MCCMNC for app list customization: "+mccmnc[0]+":"+mccmnc[1]);return mccmnc;};function updateNitzIgnoreOns(){var p1=new Promise(function(resolve,reject){var req=navigator.mozSettings.createLock().get('ril.data.defaultServiceId');req.onsuccess=function(){resolve(req.result['ril.data.defaultServiceId']);};req.onerror=function(){resolve(false);};});var p2=navigator.customization.getValue('fih.custom.ignore.nizt.ons');Promise.all([p1,p2]).then(function(values){var serviceId=values[0];var ignoreNiztOns=(values[1]==='1'?'1':'0');printlog('updateNitzIgnoreOns serviceId='+serviceId+'  in customization values='+values[1]+" ignoreNiztOns="+ignoreNiztOns);for(let index=0;index<2;index++){if(index===serviceId){navigator.engmodeExtension.setPropertyValue('persist.radio.nitz_ignore_ons_'+index,ignoreNiztOns);}else{navigator.engmodeExtension.setPropertyValue('persist.radio.nitz_ignore_ons_'+index,'0');}}});}
function updateTwoDigitDialEnable(){let slotCount=SIMSlotManager.getSlots().length;printlog('updateTwoDigitDialEnable slotCount='+slotCount);let promises=[];for(let i=0;i<slotCount;i++){promises.push(navigator.customization.getValueForCarrier({"clientId":""+i},'stz.two_digit_num_dialing.enable'));}
if(promises.length>0){Promise.all(promises).then(function(values){let persistValue='';for(let i=0;i<values.length;i++){printlog('updateTwoDigitDialEnable values['+i+']='+JSON.stringify(values[i]));persistValue+=(JSON.stringify(values[i])==='true'?'true':'false');if((i+1)<values.length){persistValue+=',';}}
printlog('updateTwoDigitDialEnable persistValue='+persistValue);navigator.engmodeExtension.setPropertyValue('persist.two_digit_dial.enable',persistValue);});}}