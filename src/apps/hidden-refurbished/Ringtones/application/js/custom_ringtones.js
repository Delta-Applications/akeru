'use strict';window.customRingtones=(function(){var ID_PREFIX='custom:';function CustomRingtone(info,dbKey){this._name=info.name;if(info.uniqueNum!==0||info.isExplicitNum){this._name+=' ('+info.uniqueNum+')';}
this._subtitle=info.subtitle||null;this._id=ID_PREFIX+dbKey;this._blob=info.blob;this._filename=info.filename;}
CustomRingtone.prototype={get name(){return this._name;},get filename(){return this._filename;},get subtitle(){return this._subtitle;},get id(){return this._id;},get type(){return'ringtone';},get url(){return this._url||(this._url=URL.createObjectURL(this._blob));},get shareable(){return true;},get deletable(){return true;},remove:function(){return remove(this.id);},getBlob:function(){return Promise.resolve(this._blob);}};function idToDBKey(id){if(id.indexOf(ID_PREFIX)!==0){throw new Error('invalid id: '+id);}
return parseInt(id.substr(ID_PREFIX.length));}
var DBNAME='customTones';var DBVERSION=1;var STORENAME='ringtones';var db=null;function withStore(type,callback){if(db){callback(null,db.transaction(STORENAME,type).objectStore(STORENAME));}else{var openreq=indexedDB.open(DBNAME,DBVERSION);openreq.onerror=function(){console.error('customRingtones: can\'t open database:',openreq.error.name);callback(openreq.error);};openreq.onupgradeneeded=function(){var objStore=openreq.result.createObjectStore(STORENAME,{autoIncrement:true});objStore.createIndex('fullname',['name','subtitle','uniqueNum'],{unique:false});};openreq.onsuccess=function(){db=openreq.result;callback(null,db.transaction(STORENAME,type).objectStore(STORENAME));};}}
function getKeyId(info){return new Promise(function(resolve,reject){withStore('readonly',function(err,store){if(err){reject(err);return;}
var index=store.index('fullname');var req=index.openCursor(IDBKeyRange.only([info.name,info.subtitle,0]));req.onsuccess=function(event){var cursor=event.target.result;if(!cursor){resolve(null);return;}else{resolve(cursor.primaryKey);}};req.onerror=function(){console.error('Error in customRingtones.getKeyId(): ',req.error.name);reject(req.error);};});});}
function backupBlob(info){return new Promise(function(resolve,reject){var reader=new FileReader();reader.readAsArrayBuffer(info.blob);reader.onload=function(){var buffer=reader.result;var backupBlob=new Blob([buffer],{type:info.blob.type});try{resolve(backupBlob);}
catch(e){console.error('Exception in backupBlob callback',e);reject(e);}}});}
function add(info){return backupBlob(info).then(function(backupBlob){var cleanedInfo={name:info.name||'',subtitle:info.subtitle||'',filename:info.filename,blob:backupBlob,uniqueNum:0};return getKeyId(cleanedInfo).then(function(id){return new Promise(function(resolve,reject){withStore('readwrite',function(err,store){if(err){reject(err);return;}
var req=store.put(cleanedInfo,id);req.onsuccess=function(event){resolve({tone:new CustomRingtone(cleanedInfo,event.target.result),hasSaved:null===id?false:true});};req.onerror=function(){console.error('Error in customRingtones.add(): ',req.error.name);reject(req.error);};});});});　　　});}
function remove(id){return new Promise(function(resolve,reject){withStore('readwrite',function(err,store){if(err){reject(err);return;}
var req=store.delete(idToDBKey(id));req.onsuccess=function(event){resolve();};req.onerror=function(){console.error('Error in customRingtones.remove(): ',req.error.name);reject(req.error);};});});}
function clear(){return new Promise(function(resolve,reject){withStore('readwrite',function(err,store){if(err){reject(err);return;}
var req=store.clear();req.onsuccess=function(event){resolve();};req.onerror=function(){console.error('Error in customRingtones.clear(): ',req.error.name);reject(req.error);};});});}
function get(id){return new Promise(function(resolve,reject){withStore('readonly',function(err,store){if(err){reject(err);return;}
var key=idToDBKey(id);var req=store.get(key);req.onsuccess=function(event){var data=event.target.result;if(!data){resolve(null);}else{resolve(new CustomRingtone(data,key));}};req.onerror=function(){console.error('Error in customRingtones.get(): ',req.error.name);reject(req.error);};});});}
function getCustomFiles(toneType){return new Promise(function(resolve,reject){if(toneType==='alerttone'){resolve([]);return;};withStore('readonly',function(err,store){if(err){reject(err);return;};let req=store.openCursor();let results=[];req.onsuccess=function listOnSuccess(event){let cursor=event.target.result;if(cursor){let value=cursor.value;results.push(new CustomRingtone(value,cursor.key));if(results.length===1){window.dispatchEvent(new CustomEvent('getcustomtonescount',{detail:{tonescount:results.length}}));};cursor.continue();}else{window.dispatchEvent(new CustomEvent('getcustomtonescount',{detail:{tonescount:results.length}}));resolve(results);}};req.onerror=function listOnError(){console.error('Error in customRingtones.list(): ',req.error.name);reject(req.error);};});});}
function list(getCustomFiles,toneType,toneList){if(toneType==='alerttone'){return;};return getCustomFiles.then((tones)=>{toneList.add(tones);window.dispatchEvent(new CustomEvent('customtonescreated'));});};return{add:add,remove:remove,clear:clear,get:get,list:list,getCustomFiles:getCustomFiles};})();