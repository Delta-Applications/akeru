.appWindow[transition-state="closed"]:not(.fadeout):not(.homescreen):not(.attentionWindow) {
  opacity: 0;
  transform: translateX(0);
}

.appWindow:not(.homescreen):not(.searchWindow):not(.attentionWindow):not(.transparent-background) {
  background-color: black;
}

.appWindow.browser[data-manifest-name=""] .browser-container {
  background-color: white;
}

.appWindow.browser[data-manifest-name=""] .activityWindow.transparent-background .browser-container {
  background-color: transparent;
}

.appWindow.popupWindow {
  background-color: white;
}

.appWindow:not(.homescreen):not(.searchWindow).render {
  background-image: none !important;
  background-color: transparent;
}

/* Utility tray needs to be actionable on the attention screen */

.appWindow.attentionWindow,
.appWindow.attentionWindow .chrome .controls {
  pointer-events: none;
}

/* Attention Screen needs to be clickable */

.appWindow.attentionWindow .render,
.appWindow.attentionWindow.toaster-mode {
  pointer-events: auto;
}

.appWindow:not(.homescreen):not(.searchWindow).light {
  background-color: #fff;
}

/* mozbrowser iframe layout */

.appWindow iframe {
  border: none;
}

.appWindow:not(.homescreen):not(.searchWindow).render:not(.transparent-background) > div.browser-container {
  background-color: #fff;
}

.appWindow:not(.homescreen):not(.searchWindow).light.render > div.browser-container {
  background-color: #f2f2f2;
}

.appWindow:not(.homescreen):not(.searchWindow).render:not(.placeholder-enabled):not(.transparent-background) > div.browser-container > iframe {
  background-color: #fff;
}

.appWindow.placeholder-enabled > div.browser-container > iframe {
  background-color: transparent;
}

.appWindow.enlarge {
  animation: openApp 0.15s forwards cubic-bezier(0.3, 0, 0.3, 1);
}

.appWindow.transition-closing.perpendicular {
  animation-duration: 0.1s;
}

@keyframes openApp {
  0%   { transform: scale(0.7); opacity: 0;}
  50%  { opacity: 1; }
  100% { transform: scale(1); opacity: 1; }
}

.appWindow.zoom-in {
  transform: scale(1);
  animation: zoom-in 0.35s forwards cubic-bezier(0.5, 0.0, 1.0, 1.0);
}

@keyframes zoom-in {
  0%   { transform: scale(1);}
  100% { transform: scale(1.3);}
}

.appWindow.invoked {
  animation: invokedApp .3s forwards linear;
}

.appWindow.invoking {
  animation: invokingApp .3s forwards linear;
}

/* Invoking app moves out */
@keyframes invokingApp {
  0%   { transform: translateX(0) }
  100% { transform: translateX(calc(-100% - 20px)); }
}

/* Invoked app moves in */
@keyframes invokedApp {
  0%   { transform: translateX(calc(100% + 20px)); }
  100%  { transform: translateX(0); }
}

.appWindow.fade-in {
  animation: fadeInApp 0.3s forwards linear;
}

.browser-container.fade-in {
  animation: fadeInApp 0.05s forwards linear;
}

.browser-container.transparent {
  opacity: 0;
}

.appWindow.fade-out {
  animation: fadeOutApp 0.25s forwards cubic-bezier(0.4, 0, 1, 1);
}

/* Invoking secure app moves out */
@keyframes fadeInApp {
  0% {
    opacity: 0;
 }
 100% {
    opacity: 1;
 }
}

/* Invoked secure app moves in */
@keyframes fadeOutApp {
  0%  {
    opacity: 1;
  }
  100% {
    opacity: 0;
  }
}

#windows.slow-transition .appWindow.transition-closing,
#windows.slow-transition .appWindow.transition-opening {
  animation-duration: 3s;
}

.appWindow.reduce {
  animation: closeApp 0.15s forwards cubic-bezier(0.4, 0, 1, 1);
}

.appWindow.transition-opening.perpendicular {
  animation-duration: 0.1s;
  opacity: 0;
}


/* The scale transformation used to be 5. In order to benefit from async
 * transform the frame width/height needs to be < 4096.
 * The size of one side of the frame is equal to
 * devicePixelRatio * frame.[width|height] * scale, and as a result we need
 * to pick a value that fits well for pixel ratio between 1 and 2.
 */
.appWindow.zoom-out {
  transform: scale(1.3);
  animation: zoom-out 0.35s forwards cubic-bezier(0.3, 0.0, 0.0, 1.0);
}

@keyframes zoom-out {
  0%   { transform: scale(1.3);}
  100% { transform: scale(1);}
}

@keyframes closeApp {
  0%   { transform: scale(1); opacity: 1;}
  100% { transform: scale(0.7); opacity: 0;}
}

.appWindow.back {
  transition: transform 0.25s cubic-bezier(0.7, 0.0, 1.0, 1.0), visibility 0.25s cubic-bezier(0.7, 0.0, 1.0, 1.0);
  transform: scale(0.86);
}

.appWindow.restored {
  transform: translateX(0);
  transition: transform 0.25s cubic-bezier(0.7, 0.0, 1.0, 1.0);
}

.appWindow iframe {
  visibility: visible;
}

.appWindow.homescreen > .chrome {
  background: linear-gradient(to bottom, rgba(0,0,0,0.4), rgba(0,0,0,0)) !important;
}

.appWindow > .touch-blocker {
  visibility: hidden;
  background: transparent;
  pointer-events: all;
}

.appWindow.overlay .touch-blocker,
.appWindow.transition-closing .touch-blocker,
.appWindow.transition-opening .touch-blocker {
  /* The animation takes .3 seconds so users cannot touch the app while the
   * closing animation is performing */
  visibility: visible;
}

.appWindow > .modal-dialog,
.appWindow > .authentication-dialog,
.authentication-dialog > .authentication-dialog-http {
  visibility: hidden;
}

.appWindow.searchWindow {
  overflow: visible;
}

.appWindow > .modal-dialog.visible,
.appWindow > .authentication-dialog.visible,
.authentication-dialog > .authentication-dialog-http.visible {
  visibility: visible;
}

.appWindow > .modal-dialog > form {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  padding: 0;
  margin: 0;
  visibility: hidden;
}

.appWindow > .modal-dialog input {
  border-radius: 0.2rem;
  height: 4rem;
  font-size: 2rem;
  width: 100%;
  color: white;
  background: none;
  -moz-box-sizing: border-box;
  margin-bottom: 1.5rem; /* not overlap by menu while keyboard pop */
}

.appWindow > .modal-dialog > form.visible {
  visibility: visible;
}

/****************** Screenshot Overlay ******************/
.appWindow .screenshot-overlay {
  pointer-events: none;
  height: 100%;
  visibility: hidden;

  /* We need this to resize hi-res screenshot */
  background-size: cover;
}

.appWindow .screenshot-overlay.visible {
  visibility: visible;
}

.appWindow.collapsible .screenshot-overlay {
  background-color: inherit;
}

/* Bug 1071235: Workaround for bug 1076783 */
.browser-container:-moz-full-screen-ancestor > .screenshot-overlay {
  visibility: hidden;
}

.appWindow.collapsible:not(.active) .screenshot-overlay {
  margin-top: var(--rocketbar-urlbar-height);
}

.appWindow iframe.hidden {
  visibility: hidden;
}

/* inline components */

.appWindow > .appWindow {
  z-index: 65536;
}

.appWindow > .touch-blocker {
  z-index: 1026;
}

.appWindow.popupWindow > .chrome {
  z-index: 7;
}

.appWindow > .chrome,
.appWindow > .browser-zoom-indicator {
  z-index: 5;
}

.appWindow > .placeholder {
  z-index: 3;
}

.appWindow.placeholder-enabled > .browser-container {
  z-index: 4;
}

.appWindow > .authentication-dialog {
  z-index: 100;
}

.appWindow.slideleft {
  animation: slideLeft 0.3s forwards cubic-bezier(0.7, 0.0, 1.0, 1.0);
}

.appWindow.slideright {
  animation: slideRight 0.3s forwards cubic-bezier(0.7, 0.0, 1.0, 1.0);
}

.appWindow.slide-from-bottom {
  animation: slideFromDown 0.3s forwards cubic-bezier(0.7, 0.0, 1.0, 1.0);
}

.appWindow.slide-to-bottom {
  animation: slideToDown 0.3s forwards cubic-bezier(0.7, 0.0, 1.0, 1.0);
}

.appWindow.slide-from-top {
  animation: slideFromUp 0.05s forwards cubic-bezier(0.7, 0.0, 1.0, 1.0);
}

#windows.slow-transition .appWindow.slide-from-top {
  animation: slideFromUp 3s forwards cubic-bezier(0.7, 0.0, 1.0, 1.0);
}

.appWindow.slide-to-top {
  animation: slideToUp 0.05s forwards cubic-bezier(0.7, 0.0, 1.0, 1.0);
}

.appWindow.in-from-left {
  animation: inFromLeft 0.3s forwards cubic-bezier(0.7, 0.0, 1.0, 1.0);
}

.appWindow.out-to-right {
  animation: outToRight 0.3s forwards cubic-bezier(0.7, 0.0, 1.0, 1.0);
}

@keyframes slideLeft {
  0%   { transform: translateX(100%); }
  100% { transform: translateX(0); }
}

@keyframes inFromLeft {
  0%   {
    transform: translateX(-20%);
    opacity: 0.25;
  }
  100% {
    transform: translateX(0);
    opacity: 1.0;
  }
}

@keyframes outToRight {
  0%   { transform: translateX(0); }
  100% { transform: translateX(100%); }
}

.appWindow.slidedown {
  animation: slideDown 0.3s forwards cubic-bezier(0.7, 0.0, 1.0, 1.0);
}

@keyframes slideFromDown {
  0%   { transform: translateY(calc(100%)); }
  100% { transform: translateY(0); }
}

@keyframes slideToDown {
  0%   { transform: translateY(0); }
  100% { transform: translateY(calc(100%)); }
}

@keyframes inFromLeft {
  0%   {
    transform: translateX(-20%);
    opacity: 0.25;
  }
  100% {
    transform: translateX(0);
    opacity: 1.0;
  }
}

@keyframes outToRight {
  0%   { transform: translateX(0); }
  100% { transform: translateX(100%); }
}

@keyframes slideFromUp {
  0%   { transform: translateY(calc(-100%)); }
  100% { transform: translateY(0); }
}

@keyframes slideToUp {
  0%   { transform: translateY(0); }
  100% { transform: translateY(calc(-100%)); }
}

/* Edges */
#windows > .appWindow:not(.homescreen):not(.attentionWindow) {
  /* not in the viewport */
  transform: translateY(-100%);
  opacity: 1;
}

.appWindow.attentionWindow.hidden {
  display: none;
}

#screen #windows > .appWindow.will-become-inactive {
  opacity: 0;
}

#screen #windows > .appWindow.active:not(.will-become-inactive):not(.back),
#screen #windows > .appWindow.will-become-active,
#screen #windows > .appWindow.inside-edges {
  opacity: 1;
  transform: translateX(0);
}

#screen #windows > .appWindow.outside-edges-left {
  opacity: 1;
  transform: translateX(calc(-100% - 2rem));
}

#screen #windows > .appWindow.outside-edges-right {
  opacity: 1;
  transform: translateX(calc(100% + 2rem));
}

#screen #windows > .appWindow.will-become-active,
#screen #windows > .appWindow.inside-edges,
#screen #windows > .appWindow.outside-edges-left,
#screen #windows > .appWindow.outside-edges-right {
  will-change: transform;
}

#windows .appWindow.active iframe {
  transition-property: transform;
  transition-duration: 0.5s;
}

#screen.locked #windows .appWindow.active iframe {
  transition-property: none;
}

.appWindow.attentionWindow[transition-state="closed"] > div.browser-container {
  pointer-events: none;
}

/* Hide chrome UI of windows */
.appWindow.attentionWindow > .chrome > .controls > .urlbar > .title {
  display: none;
}
