
var Pairview={_debug:true,_remoteDeviceName:null,_pairMethod:null,_options:null,_passkey:'',pairview:document.getElementById('pair-view'),pairviewContent:document.getElementById('pair-view-content'),nameLabel:document.getElementById('label-name'),pairDescription:document.getElementById('pair-description'),comfirmationItem:document.getElementById('confirmation-method'),pinInputItem:document.getElementById('pin-input-method'),passkey:document.getElementById('passkey'),pinInput:document.getElementById('pin-input'),show:function pv_show(){var _=navigator.mozL10n.get;window.addEventListener('resize',this);document.body.classList.toggle('large-text',navigator.largeTextEnabled);this._remoteDeviceName=this._remoteDeviceName||_('unnamed-device');this.nameLabel.textContent=this._remoteDeviceName;this.debug('pair method: '+this._pairMethod);var stringName='passive-pair-'+this._pairMethod;this.pairDescription.textContent=_(stringName,{device:this._remoteDeviceName});switch(this._pairMethod){case'displaypasskey':case'confirmation':this.passkey.textContent=this._passkey;this.comfirmationItem.hidden=false;this.pinInputItem.hidden=true;this.pairviewContent.setAttribute('tabindex',0);this.pairviewContent.focus();break;case'enterpincode':this.pinInputItem.hidden=false;this.comfirmationItem.hidden=true;this.pinInput.focus();break;case'consent':this.comfirmationItem.hidden=false;this.pinInputItem.hidden=true;break;}
this.showSoftKey();},showSoftKey:function(){let close=this.close.bind(this);let pair=this.pair.bind(this);let keyItems=null;let pairKey={name:'pair',l10nId:'pair',priority:3,method:pair};let cancelKey={name:'cancel',l10nId:'cancel',priority:1,method:close};if(this._pairMethod==='displaypasskey'){keyItems=[cancelKey];}else{keyItems=[cancelKey,pairKey];}
let confirmSoftkey=new SoftkeyPanel({menuClassName:'menu-button',items:keyItems});confirmSoftkey.show();},pair:function(){this.debug('press pair button, pair method is '+this._pairMethod);switch(this._pairMethod){case'displaypasskey':this.debug('display passkey');window.close();break;case'enterpincode':var pinCode=this.pinInput.value;this._options.handle.setPinCode(pinCode).then(()=>{this.debug('Resolved setPinCode operation');},(aReason)=>{this.debug('Rejected setPinCode with reason: '+aReason);});window.close();break;case'confirmation':case'consent':this._options.handle.accept().then(()=>{this.debug('Resolved in '+this._pairMethod+' request');},(aReason)=>{this.debug('Rejected in '+this._pairMethod+' request '+' with reason: '+aReason);});window.close();break;}},init:function pv_init(method,options){this.debug('init');this._pairMethod=method;this._options=options;this._remoteDeviceName=options.deviceName;if(options.handle&&options.handle.passkey){var passkey=options.handle.passkey;var len=passkey.toString().length;var zeros=(len<6)?(new Array((6-len)+1)).join('0'):'';this._passkey=zeros+passkey;}
navigator.mozL10n.once(Pairview.show.bind(Pairview));},close:function pv_close(){this.debug('press close button - wait for promise finish');this._options.handle.reject().then(()=>{this.debug('Resolved in reject '+this._pairMethod+' request.');},(aReason)=>{this.debug('Rejected in reject '+this._pairMethod+' request with reason: '+aReason);});SoftkeyHelper.hide();window.close();},closeInput:function pv_closeInput(){if(!this.pinInputItem.hidden){this.pinInput.blur();}},handleEvent:function pv_handleEvent(evt){var _=navigator.mozL10n.get;if(!evt.target){return;}
switch(evt.type){case'resize':if(window.innerHeight<200){this.close();}
break;default:break;}},debug:function(msg){if(this._debug){console.log('[Bluetooth]Pairview(): '+msg);}}};