define(["require","modules/bluetooth/bluetooth_cod_mapper","modules/mvvm/observable"],function(e){var t=e("modules/bluetooth/bluetooth_cod_mapper"),n=e("modules/mvvm/observable"),i=!1,r=function(){};i&&(r=function(e){console.log("--> [BluetoothDevice]: "+e)});var o=function(e){r("updateConnectionInfo(): this.address = "+this.address+", this.name = "+this.name+", options = "+JSON.stringify(e)),e.connectionStatus&&(this.connectionStatus=e.connectionStatus),e.profiles&&(this.profiles=Object.create(e.profiles)),r("updateConnectionInfo(): this.connectionStatus = "+this.connectionStatus+", this.profiles = "+JSON.stringify(this.profiles))},a=function(){if(r("updateDescriptionText():"),this.paired===!1)this.descriptionText="tapToConnect";else if("pairing"===this.paired)this.descriptionText="pairing";else if(this.paired===!0)if(this.descriptionText="paired","connecting"===this.connectionStatus)this.descriptionText="connecting";else if("connected"===this.connectionStatus)if(this.profiles){var e=this.profiles.hfp,t=this.profiles.a2dp;this.descriptionText=e&&t?"connectedWithDeviceMedia":e?"connectedWithDevice":t?"connectedWithMedia":"connectedWithNoProfileInfo"}else this.descriptionText="connectedWithNoProfileInfo";else"disconnected"===this.connectionStatus&&(this.descriptionText="disconnected");r("updateDescriptionText(): this.descriptionText = "+this.descriptionText)};return function(e){var i=t.getDeviceType(e.cod),s=t.hasAudioCard(e.cod),u=e.connectionStatus||"disconnected",c=n({name:e.name,paired:e.paired,address:e.address,type:i,hasAudioCard:s,connectionStatus:u,profiles:null,descriptionText:"",get data(){return e},updateConnectionInfo:o,updateDescriptionText:a});return c._init=function(){this.observe("paired",this.updateDescriptionText.bind(this)),this.observe("connectionStatus",this.updateDescriptionText.bind(this)),this.observe("profiles",this.updateDescriptionText.bind(this))},e.onattributechanged=function(n){for(var i in n.attrs)switch(r("onDeviceAttributeChanged(): "+n.attrs[i]),n.attrs[i]){case"name":c.name=e.name;break;case"paired":r("onDeviceAttributeChanged(): device.paired = "+e.paired),c.paired=e.paired;break;case"cod":r("onDeviceAttributeChanged(): device.cod = "+e.cod),c.type=t.getDeviceType(e.cod),c.hasAudioCard=t.hasAudioCard(e.cod)}},c._init(),c}});