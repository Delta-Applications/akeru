'use strict';(function(exports){let MessageManagers=function(){this.DEBUG=true;this.name='MessageManager';this.screenLock=null;this.cpuLock=null;this.needDuplicationDetection=true;this.periodReminderEnabled=true;this.fixedIntervalReminder=false;this.periodReminder=null;};MessageManagers.prototype.debug=function(s){if(this.DEBUG){console.log(`-*- CMAS ${this.name} -*- ${s}`);}};MessageManagers.prototype.checkIfMessageCanShow=function(message){if(typeof(message)!=='object'){return Promise.resolve(false);}
if(Utils.isETWSAlert(message)){let warningType=message.etws.warningType?message.etws.warningType:'other';message.messageType=`etws-warningType-${warningType}`;this.saveMessage(message);return Promise.resolve(true);}else{return this.isShowMessage(message);}};MessageManagers.prototype.duplicationDetectionMechanism=function(message){if(!this.needDuplicationDetection){return Promise.resolve(true);}
return new Promise((resolve)=>{const isGSM=Utils.isGSMMsg(message);const result=Store.getActiveMessages(message);const messages=isGSM?result.gsmMsgArr:result.cdmaMsgArr;let hasDuplicationMsg=false;for(let i=0;i<messages.length;i++){if(Utils.isSameMsg(messages[i],message,isGSM)){hasDuplicationMsg=true;break;}}
this.debug(`hasDuplicationMsg -> ${hasDuplicationMsg}`);resolve(!hasDuplicationMsg);});};MessageManagers.prototype.isShowMessage=function(message){return new Promise((resolve)=>{return Utils.getCmasMessageInfo(message,(info)=>{if(info.receive){Utils.getSettingsValue('cmas.ignore.dup').then((noDup)=>{if(!noDup){this.duplicationDetectionMechanism(message).then((result)=>{if(result){message.messageType=info.type;this.saveMessage(message);}
resolve(result);});}else{message.messageType=info.type;this.saveMessage(message);resolve(true);}});}else{resolve(false);}});});};MessageManagers.prototype.saveMessage=function(msg){Utils.setSettingsValue('cmas.ignore.dup',false);msg.isGSM=Utils.isGSMMsg(msg);Store.save(msg);};MessageManagers.prototype.timedReminderUser=function(period,callback){AlarmHandler.appendAlarms(period,()=>{callback();});};MessageManagers.prototype.startPeriodReminder=function(bReset,callback){if(!this.periodReminderEnabled){return;}
this.debug('startPeriodReminder:: start reminder.');if(this.fixedIntervalReminder){const key='cmas.remind.period';Utils.getSettingsValue(key).then((period)=>{if(period){this.timedReminderUser(period,callback);}});}else{if(bReset){this.periodReminder=[1,3,5];}
const period=this.periodReminder.length>1?this.periodReminder.shift():this.periodReminder[0];this.timedReminderUser(period,callback);}};MessageManagers.prototype.stopPeriodReminder=function(){if(!this.periodReminderEnabled){return Promise.resolve();}
this.debug('stopPeriodReminder:: stop reminder.');return new Promise((resolve)=>{return AlarmHandler.removeAlarms().then(()=>{resolve();});});};MessageManagers.prototype.disablePeriodReminder=function(){this.periodReminderEnabled=false;};let MessageManager=new MessageManagers();exports.MessageManager=MessageManager;})(window);